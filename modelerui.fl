# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {.h} 
code_name {.cxx}
class ModelerUserInterface {open
} {
  Function {ModelerUserInterface()} {open
  } {
    Fl_Window m_controlsWindow {
      label {CSE457 Modeler}
      callback {ModelerUserInterface* pUI = (ModelerUserInterface*)(o->user_data());
	if(Fl::e_number == FL_CLOSE) {
		pUI->m_controlsWindow->hide();
		pUI->m_modelerWindow->hide();
	}} open
      xywh {467 443 395 326} type Double when 0 hide resizable
    } {
      Fl_Menu_Bar m_controlsMenuBar {open
        xywh {0 0 395 25}
      } {
        Submenu {} {
          label File open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {Save Raytracer File}
            callback {const char *filename = fileDialog(Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
				"RAY File (*.ray)\\t*.ray",
				"Save Raytracer File");
	
	if(!filename)
		return;
	
	if(openRayFile(filename) == false) {
		fl_alert("Error opening file.");
	}
	else {
		m_modelerView->draw();
		closeRayFile();
	}} selected
            xywh {0 0 100 20}
            code0 {\#include "modelerview.h"}
            code2 {\#include <FL/Fl_Message.H>}
          }
          MenuItem {} {
            label {Save Image}
            callback {const char* filename = fileDialog(Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
				"PNG Image File (*.png)\\t*.png\\nJPEG Image File (*.jpg)\\t*.jpg",
				"Save Image");
	
	if(!filename)
		return;
	
	int x = m_modelerView->x();
	int y = m_modelerView->y();
	int w = m_modelerView->w();
	int h = m_modelerView->h();
	
	m_modelerWindow->show();
	m_modelerView->make_current();
	m_modelerView->draw();
		
	unsigned char *imageBuffer = new unsigned char[3*w*h];
	
	// Tell openGL to read from the front buffer when capturing
	// out paint strokes
	glReadBuffer(GL_BACK);
	
	glPixelStorei( GL_PACK_ALIGNMENT, 1 );
	glPixelStorei( GL_PACK_ROW_LENGTH, w );
	glReadPixels( 0, 0, w, h, 
		GL_RGB, GL_UNSIGNED_BYTE,
		imageBuffer );
	
	std::string strFileName = filename;
	int fileType = m_nativeChooser->filter_value();	//0: PNG, 1: JPG
\#ifdef SAMPLE_SOLUTION
	//maybe add something to tack on the right file extension if the user didn't use an appropriate filename for this image type
\#endif
	
	int quality = 95;
	if(fileType == 1) {
		Dialog2 x(0,0,0,0,"ok");
		quality = x.getValue();
	}
	
	save(filename, imageBuffer, w, h, fileType == 0 ? ".png" : ".jpg", quality);
	
	delete [] imageBuffer;}
            xywh {10 10 100 20} divider
            code0 {\#include "modelerview.h"}
            code1 {\#include <FL/Fl_Native_File_Chooser.H>}
            code2 {\#include "dialog.h"}
            code3 {\#include "imageio.h"}
          }
          MenuItem {} {
            label {Open Position File}
            callback {const char *filename = fileDialog(Fl_Native_File_Chooser::BROWSE_FILE,
				"Position File (*.pos)\\t*.pos",
				"Open Position File");
	
	if(!filename)
		return;
	
	std::ifstream ifs( filename );
	if( !ifs ) {
		std::cerr << "Error: couldn't read position file " << filename << std::endl;
		return;
	}
	
	float elevation, azimuth, dolly, twist, x, y, z;
	ifs >> elevation >> azimuth >> dolly >> twist >> x >> y >> z;
	
	m_modelerView->m_camera->setElevation( elevation);
	m_modelerView->m_camera->setAzimuth( azimuth );
	m_modelerView->m_camera->setDolly( dolly );
	m_modelerView->m_camera->setTwist( twist );
	m_modelerView->m_camera->setLookAt( Vec3f(x, y, z) );
	
	unsigned int controlNum; 
	float value;
	while( ifs >> controlNum >> value ) {
		if( controlNum >= ModelerApplication::Instance()->GetNumControls() ) {
			break;
		}
		
		ModelerApplication::Instance()->SetControlValue(controlNum, value);
	}
	
	m_modelerView->redraw();}
            xywh {0 0 100 20}
            code0 {\#include <iostream>}
            code1 {\#include <fstream>}
            code2 {\#include "camera.h"}
          }
          MenuItem {} {
            label {Save Position File}
            callback {const char *filename = fileDialog(Fl_Native_File_Chooser::BROWSE_SAVE_FILE,
				"Position File (*.pos)\\t*.pos",
				"Save Position File");
	
	if(!filename)
		return;
	
	FILE* posFile = NULL;
	fopen_s(&posFile, filename, "w");
	if(!posFile) {
		fl_alert("Save failed!");
		return;
	}
	
	float elevation, azimuth, dolly, twist;
	Vec3f lookAt;
	elevation = m_modelerView->m_camera->getElevation();
	dolly = m_modelerView->m_camera->getDolly();
	azimuth = m_modelerView->m_camera->getAzimuth();
	twist = m_modelerView->m_camera->getTwist();
	lookAt = m_modelerView->m_camera->getLookAt();
	
	fprintf(posFile, "%f %f %f %f %f %f %f\\n", elevation, azimuth, dolly, twist, lookAt[0], lookAt[1], lookAt[2]);
	
	double value;
	for(unsigned int i = 0; i < ModelerApplication::Instance()->GetNumControls(); i++) {
		value = ModelerApplication::Instance()->GetControlValue(i);
		
		fprintf(posFile, "%d %f\\n", i, value);
	}
	
	fclose(posFile);}
            xywh {0 0 100 20} divider
          }
          MenuItem {} {
            label Exit
            callback {m_controlsWindow->hide();
m_modelerWindow->hide();}
            xywh {10 10 100 20}
          }
        }
        Submenu {} {
          label View open
          xywh {0 0 100 20}
          code0 {\#include "modelerdraw.h"}
        } {
          MenuItem {} {
            label Normal
            callback {setDrawMode(NORMAL);
m_modelerView->redraw();}
            xywh {0 0 100 20} type Radio value 1
          }
          MenuItem {} {
            label {Flat Shaded}
            callback {setDrawMode(FLATSHADE);
m_modelerView->redraw();}
            xywh {0 0 100 20} type Radio
          }
          MenuItem {} {
            label Wireframe
            callback {setDrawMode(WIREFRAME);
m_modelerView->redraw();}
            xywh {10 10 100 20} type Radio divider
          }
          MenuItem {} {
            label {High Quality}
            callback {setQuality(HIGH);
m_modelerView->redraw();}
            xywh {0 0 100 20} type Radio
          }
          MenuItem {} {
            label {Medium Quality}
            callback {setQuality(MEDIUM);
m_modelerView->redraw();}
            xywh {10 10 100 20} type Radio value 1
          }
          MenuItem {} {
            label {Low Quality}
            callback {setQuality(LOW);
m_modelerView->redraw();}
            xywh {20 20 100 20} type Radio
          }
          MenuItem {} {
            label {Poor Quality}
            callback {setQuality(POOR);
m_modelerView->redraw();}
            xywh {30 30 100 20} type Radio
          }
        }
        Submenu {} {
          label Animate open
          xywh {0 0 100 20}
        } {
          MenuItem m_controlsAnimOnMenu {
            label Enable
            callback {ModelerApplication::Instance()->m_animating = (m_controlsAnimOnMenu->value() == 0) ? false : true;}
            xywh {0 0 100 20} type Toggle
          }
        }
      }
      Fl_Browser m_controlsBrowser {
        label Controls
        callback {for (int i=0; i<ModelerApplication::Instance()->m_numControls; i++) {
	if (m_controlsBrowser->selected(i+1))
		ModelerApplication::Instance()->ShowControl(i);
	else
		ModelerApplication::Instance()->HideControl(i);
}}
        xywh {0 25 140 300} type Multi textsize 10 resizable
      }
      Fl_Scroll m_controlsScroll {open
        xywh {145 25 250 300} type VERTICAL_ALWAYS when 1
      } {
        Fl_Pack m_controlsPack {open
          xywh {145 25 225 300}
          code0 {\#include "modelerapp.h"}
        } {}
      }
    }
    Fl_Window m_modelerWindow {
      label Model
      callback {ModelerUserInterface* pUI = (ModelerUserInterface*)(o->user_data());
	if(Fl::e_number == FL_CLOSE) {
		pUI->m_controlsWindow->hide();
		pUI->m_modelerWindow->hide();
	}} open
      xywh {481 95 340 296} type Double when 0 hide resizable
    } {
      Fl_Box m_modelerView {
        label ModelerView
        xywh {0 0 340 295} resizable
        code0 {\#include "modelerview.h"}
        class ModelerView
      }
    }
    code {m_nativeChooser = NULL;} {}
  }
  Function {show()} {open
  } {
    code {m_controlsWindow->show();
m_modelerWindow->show();
m_modelerView->show();} {}
  }
  Function {fileDialog(Fl_Native_File_Chooser::Type dialogType, const char* filter, const char* title=NULL)} {open private return_type {const char*}
  } {
    code {//------------------------------------------------------------------------
// This displays a modal file chooser with a native look-and-feel.
// The available dialog types are:
//   BROWSE_DIRECTORY       - Open a single directory
//   BROWSE_FILE            - Open a single file
//   BROWSE_MULTI_DIRECTORY - Open directories, allowing the user to
//                            select more than one at a time
//   BROWSE_MULTI_FILE      - Open files, allowing the user to select
//                            more than one at a time
//   BROWSE_SAVE_DIRECTORY  - Save a directory
//   BROWSE_SAVE_FILE       - Save a file
//
// The filter limits the displayed files. See cb_load_image for an example.
// title is optional, use NULL for the OS default title.
// The return value is the filepath.
//------------------------------------------------------------------------

	if(!m_nativeChooser)
		m_nativeChooser = new Fl_Native_File_Chooser(dialogType);
	else
		m_nativeChooser->type(dialogType);
	m_nativeChooser->filter(filter);
	m_nativeChooser->title(title);
	int ret = m_nativeChooser->show();
	if(ret == -1 ||	ret == 1) {
		//error or cancel respectively
		return NULL;
	}
	return m_nativeChooser->filename();} {}
  }
  decl {Fl_Native_File_Chooser* m_nativeChooser;} {}
  Function {~ModelerUserInterface()} {open
  } {
    code {if(m_nativeChooser) delete m_nativeChooser;} {}
  }
} 
