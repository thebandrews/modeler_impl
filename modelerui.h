// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef MODELERUI_H
#define MODELERUI_H

#include <iostream>
#include <fstream>
#include <vector>
#include <utility>
#include <map>
#include <string>

#include <FL/Fl.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Color_Chooser.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Message.H>
#include <FL/Fl_Native_File_Chooser.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Tile.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Tabs.H>
#include "FL/Fl_Tree.H" // The FLTK Tree comes from FLTK 1.1.3

#include "modelerview.h"
#include "dialog.h"
#include "imageio.h"
#include "camera.h"
#include "modelerdraw.h"
#include "model.h"
#include "vault.h"


// TODO: refactor out this forward declaration
class ModelerView;
class SimpleCameraModel;

class ModelerUserInterface {
public:
	enum ImageFileTypes	{ PNG, JPEG	};
	ModelerUserInterface();
	Fl_Double_Window *m_controlsWindow;
private:
	void cb_m_controlsWindow_i(Fl_Double_Window*, void*);
	static void cb_m_controlsWindow(Fl_Double_Window*, void*);
public:
	Fl_Menu_Bar *m_controlsMenuBar;
	static Fl_Menu_Item menu_m_controlsMenuBar[];
private:
	void cb_loadcurve_i(Fl_Menu_*, void*);
	static void cb_loadcurve(Fl_Menu_*, void*);
	void cb_Save_i(Fl_Menu_*, void*);
	static void cb_Save(Fl_Menu_*, void*);
	void cb_Save1_i(Fl_Menu_*, void*);
	static void cb_Save1(Fl_Menu_*, void*);
	void cb_Open_i(Fl_Menu_*, void*);
	static void cb_Open(Fl_Menu_*, void*);
	void cb_Save2_i(Fl_Menu_*, void*);
	static void cb_Save2(Fl_Menu_*, void*);
	void cb_Exit_i(Fl_Menu_*, void*);
	static void cb_Exit(Fl_Menu_*, void*);
	void cb_Normal_i(Fl_Menu_*, void*);
	static void cb_Normal(Fl_Menu_*, void*);
	void cb_Flat_i(Fl_Menu_*, void*);
	static void cb_Flat(Fl_Menu_*, void*);
	void cb_Wireframe_i(Fl_Menu_*, void*);
	static void cb_Wireframe(Fl_Menu_*, void*);
	void cb_High_i(Fl_Menu_*, void*);
	static void cb_High(Fl_Menu_*, void*);
	void cb_Medium_i(Fl_Menu_*, void*);
	static void cb_Medium(Fl_Menu_*, void*);
	void cb_Low_i(Fl_Menu_*, void*);
	static void cb_Low(Fl_Menu_*, void*);
	void cb_Poor_i(Fl_Menu_*, void*);
	static void cb_Poor(Fl_Menu_*, void*);
	void cb_Reload_i();
	static void cb_Reload(Fl_Menu*, void*);
	void cb_GenShaders_i();
	static void cb_GenShaders(Fl_Menu*, void*);
public:
  static Fl_Menu_Item *m_controlsAnimOnMenu;
private:
  void cb_m_controlsAnimOnMenu_i(Fl_Menu_*, void*);
  static void cb_m_controlsAnimOnMenu(Fl_Menu_*, void*);
  void cb_m_controlsBrowser_i(Fl_Browser*, void*);
  static void cb_m_controlsBrowser(Fl_Browser*, void*);
public:
/////////////////////// WINDOW PANES ///////////////////////////

	/** Divides the view vertically. */
	Fl_Tile* m_splitPane;

		/** Left UI pane */
		Fl_Group* leftPane;

			/** Splits the control pane from the tree view */
			Fl_Tile* m_controlSplitPane;

				/** Tree of Modeler controls. */
				Fl_Tree *m_controlsTree;

				/** Pane containing controls for each control group. */
				Fl_Group* m_controlPane;

				/** Scrolling area that contains a model's controls. */
				Fl_Scroll *m_controlsScroll;

					/** Packs controls inside m_controlsScroll */
					Fl_Pack *m_controlsPack;

		/** The right half of the screen, containing the 3D view. */
		Fl_Group* m_viewPane;
	
			/** The 3D view */
			ModelerView *m_modelerView;

	void show();
public:
  ~ModelerUserInterface();

///////////////////// TAKING SCREENSHOTS ////////////////////////////
public:
	void saveFrame(const char* filename, int fileType = 0,
									 int quality = 95);


///////////////////////// FILE DIALOGS ////////////////////////////
private:
  const char* fileDialog(Fl_Native_File_Chooser::Type dialogType,
	  const char* filter, const char* title=NULL);
  Fl_Native_File_Chooser* m_nativeChooser;

public: // TODO: make private?
  int loadFile(std::string& buffer,
			   const bool save = false,
			   const char* title = "Open File",
			   const char* filter = "All Files\t*.*",
			   const char* extensions = "");


///////////////////////// SINGLETON INFO //////////////////////////
private:
	/** The single instance of this class. */
	static ModelerUserInterface* instance;
public:
	/** Returns the current instance of ModelerUserInterface. */
	static ModelerUserInterface* getInstance();

/////////////////////////// MODEL DATA //////////////////////////////
private:
	Model* model;

public:
	/** Set the model (and show controls for it) */
	void setModel(Model* model);

/////////////////////////// ANIMATION //////////////////////////
private:
	/** True if we're animating. */
	bool animating;

	/** Number of frames of animation shown in each second. */
	int framesPerSecond;

	/** True while the current frame is drawing. */
	bool drawing;
public:
	/** Returns true if the Modeler animation checkbox is checked. */
	bool isAnimating();

public:
	/** Gets called every few moments, and handles animation. */
	static void handleTimeout(void* ui);

	/** Gets called every few moments, and handles animation. */
	void handleTimeoutInner();

//////////////////////// MODELER CONTROLS ////////////////////////////
private:
	/** Current group being shown in the Modeler view. */
	GroupProperty* currentGroup;

	/** List of groups that can be displayed. */
	std::vector<GroupProperty*> groups;

public:
	/** Called when the Show Light/Camera Markers menu item is clicked. */
	static void showMarkersCallback(Fl_Menu_* m, void* p);

	/** Adds the entries from the given group property. */
	void populateList(GroupProperty* group, Fl_Tree_Item* parent = NULL);

	/**
	 * Shows controls for the given group property.
	 * TODO: show multiple control groups!
	 */
	void pickGroupProperty(GroupProperty* group);

	/** Called when you change a slider. */
	static void SliderCallback(Fl_Slider*, void*);

	/** Called when you change a checkbox. */
	static void ButtonCallback(Fl_Button*, void*);

	/** Called when a color picker is clicked. */
	static void ColorPickerCallback(Fl_Color_Chooser*, void*);

	/** Called when you change a choice. */
	static void ChoiceCallback(Fl_Button* button, void* p);

	/** Called when a slider should be updated. */
	static void updateRangeSlider(RangeProperty* prop, Fl_Slider* slider, void* v);

	/** Called when a checkbox should be updated. */
	static void updateCheckbox(BooleanProperty* prop, Fl_Button* checkbox, void* v);

	/** Called when a color picker should be updated. */
	static void updateColorChooser(RGBProperty* prop, Fl_Color_Chooser* chooser, void* v);

	/** Called when a choice should be updated. */
	static void updateChoice(ChoiceProperty* prop, Fl_Group* parent, void* v);

	/** Refreshes the view */
	static void cb_Refresh(Fl_Widget*, void*);

	/** Called when the user clicks an item in the Modeler tree */
	static void TreeCallback(Fl_Tree* tree, void* p);



//////////////////////// ANIMATOR CAMERA ////////////////////////
private:
	// Default camera to use if none is present in the model.
	SimpleCameraModel* defaultCam;

public:
	/** Turns control over to FLTK */
	int run();

};

#endif // MODELERUI_H